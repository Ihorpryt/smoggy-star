---
import "../styles/global.css";
import PrimaryButton from './ui/PrimaryButton.astro';
---

<div id="container" class="relative overflow-hidden">
	<canvas id="background"></canvas>

	<svg class="absolute bottom-0 left-0 w-[173px] h-[36px] md:w-[336px] md:h-[70px]" width="336" height="70" viewBox="0 0 336 70" fill="none" xmlns="http://www.w3.org/2000/svg">
		<path d="M0 0H216L336 70H0V0Z" fill="#0F1114"/>
	</svg>
	<svg class="absolute bottom-0 right-0 w-[173px] h-[36px] md:w-[336px] md:h-[70px]" width="336" height="70" viewBox="0 0 336 70" fill="none" xmlns="http://www.w3.org/2000/svg">
		<path d="M336 0H120L0 70H336V0Z" fill="#0F1114"/>
	</svg>


	<main class="flex flex-col h-full justify-end">
		<section id="hero" class="flex flex-col items-center justify-center gap-8 md:gap-12 py-18">
			<div class="flex flex-col items-center justify-center gap-4 md:gap-6 text-white">
				<p class="uppercase text-sm font-mono">UX / UI / WEB</p>
				<h1 class="uppercase text-5xl md:text-6xl font-monument max-w-6xl text-center">
					<span class="max-sm:hidden">Sites & product UX</span> without agency bloat
				</h1>
			</div>
			<section id="links">
				<PrimaryButton href="https://calendly.com/ihorthedesigner/30min" text="Book 30-min discovery call" />
			</section>
		</section>
	</main>
</div>

<script type="module">
  import * as THREE from 'https://unpkg.com/three@0.160.0/build/three.module.js';

  const canvas = document.getElementById('background');
  const container = document.getElementById('container');
  if (!canvas) {
    throw new Error('Canvas with id "background" not found');
  }
  if (!container) {
    throw new Error('Container with id "container" not found');
  }

  const renderer = new THREE.WebGLRenderer({ canvas, antialias: true, alpha: false });
  renderer.setPixelRatio(Math.min(window.devicePixelRatio || 1, 2));
  function sizeFromContainer() {
    const rect = container.getBoundingClientRect();
    return { width: Math.max(1, rect.width), height: Math.max(1, rect.height) };
  }
  const initial = sizeFromContainer();
  renderer.setSize(initial.width, initial.height);
  renderer.setClearColor(0xDD5C0B, 1);

  const scene = new THREE.Scene();
  const camera = new THREE.PerspectiveCamera(45, initial.width / initial.height, 0.1, 100);
  camera.position.z = 10;
  camera.position.y = 0;

  const geometry = new THREE.BoxGeometry( 1, 1, 1 );
  const material = new THREE.MeshBasicMaterial({ color: 0x0D0D0D });
  const cube = new THREE.Mesh(geometry, material);
  cube.position.y = 1.5;
  scene.add(cube);

  const geometry2 = new THREE.BoxGeometry( 1, 1, 1 );
  const material2 = new THREE.MeshBasicMaterial({ color: 0x0D0D0D });
  const cube2 = new THREE.Mesh(geometry2, material2);
  cube2.position.x = 1.5;
  scene.add(cube2);

  const geometry3 = new THREE.BoxGeometry( 1, 1, 1 );
  const material3 = new THREE.MeshBasicMaterial({ color: 0x0D0D0D });
  const cube3 = new THREE.Mesh(geometry3, material3);
  cube3.position.x = -1.5;
  scene.add(cube3);

  const edges = new THREE.EdgesGeometry(geometry);
  const line = new THREE.LineSegments(edges, new THREE.LineBasicMaterial({ color: 0xDD5C0B }));
  line.position.copy(cube.position);
  scene.add(line);
  const edges2 = new THREE.EdgesGeometry(geometry2);
  const line2 = new THREE.LineSegments(edges2, new THREE.LineBasicMaterial({ color: 0xDD5C0B }));
  line2.position.copy(cube2.position);
  scene.add(line2);
  const edges3 = new THREE.EdgesGeometry(geometry3);
  const line3 = new THREE.LineSegments(edges3, new THREE.LineBasicMaterial({ color: 0xDD5C0B }));
  line3.position.copy(cube3.position);
  scene.add(line3);

  const ambient = new THREE.AmbientLight(0xffffff, 0.6);
  scene.add(ambient);
  const directional = new THREE.DirectionalLight(0xffffff, 0.8);
  directional.position.set(2, 2, 2);
  scene.add(directional);

  function onResize() {
    const { width, height } = sizeFromContainer();
    renderer.setSize(width, height);
    camera.aspect = width / height;
    camera.updateProjectionMatrix();
  }
  window.addEventListener('resize', onResize);
  onResize();

  function animate() {
    cube.rotation.x += 0.005;
    cube.rotation.y += 0.005;
	line.rotation.copy(cube.rotation);

    cube2.rotation.x += -0.005;
    cube2.rotation.y += 0.005;
	line2.rotation.copy(cube2.rotation);

    cube3.rotation.x += 0.005;
    cube3.rotation.y += -0.005;
    line3.rotation.copy(cube3.rotation);
    renderer.render(scene, camera);
    requestAnimationFrame(animate);
  }
  animate();
</script>

<style>
	#background {
		position: fixed;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		z-index: -1;
		pointer-events: none;
		background-color: #DD5C0B;
	}

	#container main {
		position: relative;
		z-index: 1;
	}

	#container svg {
		position: absolute;
		z-index: 1;
	}

	#container {
		font-family: Inter, Roboto, 'Helvetica Neue', 'Arial Nova', 'Nimbus Sans', Arial, sans-serif;
		height: 90vh;
	}


	#links {
		display: flex;
		gap: 16px;
	}



	pre {
		font-family:
			ui-monospace, 'Cascadia Code', 'Source Code Pro', Menlo, Consolas, 'DejaVu Sans Mono',
			monospace;
		font-weight: normal;
		background: linear-gradient(14deg, #d83333 0%, #f041ff 100%);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-clip: text;
		margin: 0;
	}

	.box {
		padding: 16px;
		background: rgba(255, 255, 255, 1);
		border-radius: 16px;
		border: 1px solid white;
	}

	#news {
		position: absolute;
		bottom: 16px;
		right: 16px;
		max-width: 300px;
		text-decoration: none;
		transition: background 0.2s;
		backdrop-filter: blur(50px);
	}

	#news:hover {
		background: rgba(255, 255, 255, 0.55);
	}

	/* @media screen and (max-height: 368px) {
		#news {
			display: none;
		}
	}

	@media screen and (max-width: 768px) {
		#container {
			display: flex;
			flex-direction: column;
		}

		#hero {
			display: block;
			padding-top: 10%;
		}

		#links {
			flex-wrap: wrap;
		}

		#links a.button {
			padding: 14px 18px;
		}

		#news {
			right: 16px;
			left: 16px;
			bottom: 2.5rem;
			max-width: 100%;
		}

		h1 {
			line-height: 1.5;
		}
	} */
</style>
